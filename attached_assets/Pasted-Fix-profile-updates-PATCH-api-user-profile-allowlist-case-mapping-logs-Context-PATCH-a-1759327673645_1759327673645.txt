Fix profile updates (PATCH /api/user/profile) – allowlist + case mapping + logs

Context:
- PATCH /api/user/profile fails with "No valid fields to update" or empty Error {}.
- We only accept specific fields on this endpoint. Coins/gems/tickets already use the dedicated /api/user/coins/update endpoint (keep it that way).

Tasks (server – routes.ts):
1) Keep a strict allowlist for profile PATCH:
   const ALLOWED = new Map([
     ['username', 'username'],
     ['selectedAvatarId', 'selected_avatar_id'],
     ['selectedCardBackId', 'selected_card_back_id'],
   ]);

2) Before building the UPDATE, map camelCase -> snake_case:
   const body = req.body || {};
   const updates: Record<string, any> = {};
   for (const [key, col] of ALLOWED.entries()) {
     if (Object.prototype.hasOwnProperty.call(body, key)) {
       updates[col] = body[key];
     }
   }

3) If updates is empty, return:
   return res.status(400).json({ error: { message: 'No valid fields to update', received: Object.keys(body) } });

4) Log everything for debugging:
   console.log('[API] PATCH /api/user/profile uid=', userId, 'payload=', body, 'updates=', updates);

5) Run the Supabase update on public.profiles:
   const { data, error } = await supabase
     .from('profiles')
     .update(updates)
     .eq('user_id', userId)
     .select('user_id, username, email, coins, gems, tickets, selected_avatar_id, selected_card_back_id')
     .single();

   if (error) {
     console.error('[API ERROR] profile patch', { message: error.message, code: error.code, details: error.details, hint: error.hint });
     return res.status(400).json({ error: { message: error.message, code: error.code, details: error.details, hint: error.hint } });
   }
   if (!data) {
     return res.status(404).json({ error: { message: 'Profile not found' } });
   }
   return res.json({ ok: true, profile: data });

Tasks (client):
6) Ensure we never send coins/gems/tickets to PATCH /api/user/profile.
   - Avatar change → PATCH /api/user/profile { selectedAvatarId }
   - Card back change → PATCH /api/user/profile { selectedCardBackId }
   - Username change → PATCH /api/user/profile { username }
   - Coins/gems/tickets → POST /api/user/coins/update (already fixed)

7) Add client-side error logging for the PATCH:
   if (!res.ok) {
     const txt = await res.text();
     console.error('PROFILE PATCH failed', res.status, txt);
     toast.error('Failed to save profile');
     return;
   }

Acceptance:
- Changing avatar/card-back/username succeeds (200) and UI refreshes without "Failed to sync user updates".
- PATCH body shown in Network tab contains only allowed fields.
- Server logs show the mapped columns and the UPDATE executes.