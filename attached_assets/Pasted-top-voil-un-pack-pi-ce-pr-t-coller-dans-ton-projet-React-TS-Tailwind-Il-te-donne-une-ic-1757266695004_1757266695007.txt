top! voil√† un pack ‚Äúpi√®ce‚Äù pr√™t √† coller dans ton projet (React + TS + Tailwind).
Il te donne une ic√¥ne high-end fa√ßon Offsuit (d√©grad√©s, reflets, bevel, glow), + un badge ‚ÄúCoins‚Äù r√©utilisable. Et je t‚Äôexplique comment remplacer toutes les occurrences actuelles.

‚∏ª

1) Ic√¥ne pi√®ce (SVG r√©utilisable)

Cr√©e src/icons/Coin.tsx :

import * as React from "react";

export type CoinProps = {
  size?: number;         // px
  className?: string;    // tailwind etc.
  glow?: boolean;        // halo externe
};

export default function Coin({ size = 24, className = "", glow = false }: CoinProps) {
  const s = size;
  const rOuter = s * 0.48;
  const cx = s / 2;
  const cy = s / 2;

  return (
    <svg
      width={s}
      height={s}
      viewBox={`0 0 ${s} ${s}`}
      className={className}
      aria-hidden
    >
      {/* Glow externe */}
      {glow && (
        <circle
          cx={cx}
          cy={cy}
          r={rOuter}
          fill="none"
          stroke="rgba(248,202,90,0.35)"
          strokeWidth={s * 0.14}
          filter="url(#coin-blur)"
        />
      )}

      <defs>
        {/* l√©ger blur pour le glow */}
        <filter id="coin-blur">
          <feGaussianBlur stdDeviation={s * 0.12} />
        </filter>

        {/* face principale (dor√©) */}
        <radialGradient id="coin-fill" cx="50%" cy="40%" r="65%">
          <stop offset="0%" stopColor="#FFE28A" />
          <stop offset="45%" stopColor="#F8CA5A" />
          <stop offset="100%" stopColor="#D89B2C" />
        </radialGradient>

        {/* bord ext√©rieur plus sombre */}
        <linearGradient id="coin-edge" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor="#8A5D19" />
          <stop offset="100%" stopColor="#5A3F12" />
        </linearGradient>

        {/* reflet glossy */}
        <linearGradient id="coin-gloss" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor="rgba(255,255,255,0.55)" />
          <stop offset="100%" stopColor="rgba(255,255,255,0.0)" />
        </linearGradient>

        {/* ombre interne subtile */}
        <filter id="coin-inner-shadow" x="-50%" y="-50%" width="200%" height="200%">
          <feOffset dx="0" dy="1" />
          <feGaussianBlur stdDeviation={s * 0.03} result="offset-blur" />
          <feComposite operator="out" in="SourceGraphic" in2="offset-blur" result="inverse" />
          <feFlood floodColor="rgba(0,0,0,0.35)" result="color" />
          <feComposite operator="in" in="color" in2="inverse" result="shadow" />
          <feComposite operator="over" in="shadow" in2="SourceGraphic" />
        </filter>
      </defs>

      {/* tranche ext√©rieure */}
      <circle cx={cx} cy={cy} r={rOuter} fill="url(#coin-edge)" />

      {/* face */}
      <circle
        cx={cx}
        cy={cy}
        r={s * 0.42}
        fill="url(#coin-fill)"
        filter="url(#coin-inner-shadow)"
      />

      {/* ‚Äúmint mark‚Äù (petit sigle) ‚Äì simple losange stylis√© */}
      <g transform={`translate(${cx}, ${cy})`}>
        <path
          d={`M 0 ${-s * 0.17} L ${s * 0.12} 0 L 0 ${s * 0.17} L ${-s * 0.12} 0 Z`}
          fill="#FFE9B0"
          opacity="0.85"
        />
        <path
          d={`M 0 ${-s * 0.13} L ${s * 0.09} 0 L 0 ${s * 0.13} L ${-s * 0.09} 0 Z`}
          fill="#B97C1A"
          opacity="0.35"
        />
      </g>

      {/* reflet haut */}
      <ellipse
        cx={cx}
        cy={cy - s * 0.18}
        rx={s * 0.22}
        ry={s * 0.10}
        fill="url(#coin-gloss)"
      />
    </svg>
  );
}

	‚Ä¢	Look : dor√© avec bord sombre, reflet glossy, halo optionnel.
	‚Ä¢	Qualit√© : vectoriel, net √† toutes tailles; pas d‚Äôassets bitmap.

‚∏ª

2) Badge ‚ÄúCoins + amount‚Äù

Cr√©e src/components/CoinsBadge.tsx :

import * as React from "react";
import Coin from "@/icons/Coin";

type Props = {
  amount: number | string;
  glow?: boolean;
  className?: string; // pour margin externe
  size?: "sm" | "md" | "lg";
};

const sizeMap = {
  sm: { icon: 16, padX: "px-2.5", padY: "py-1", text: "text-[12px]" },
  md: { icon: 20, padX: "px-3",   padY: "py-1.5", text: "text-[13px]" },
  lg: { icon: 24, padX: "px-3.5", padY: "py-2", text: "text-[15px]" },
};

export default function CoinsBadge({ amount, glow = false, className = "", size = "md" }: Props) {
  const s = sizeMap[size];
  return (
    <div
      className={[
        "inline-flex items-center gap-2 rounded-full bg-white/6 ring-1 ring-white/10",
        "backdrop-blur-[1px] shadow-[inset_0_0_0_1px_rgba(255,255,255,0.02)]",
        s.padX, s.padY, className,
      ].join(" ")}
      role="status"
      aria-label={`Coins: ${amount}`}
    >
      <Coin size={s.icon} glow={glow} />
      <span className={["font-medium text-white/90 tabular-nums", s.text].join(" ")}>
        {typeof amount === "number" ? amount.toLocaleString() : amount}
      </span>
    </div>
  );
}

Utilisation rapide :

import CoinsBadge from "@/components/CoinsBadge";

<CoinsBadge amount={1000} glow size="lg" />


‚∏ª

3) Remplacer partout dans l‚Äôapp
	1.	Centraliser l‚Äôaffichage des pi√®ces
	‚Ä¢	Cherche o√π les pi√®ces sont rendues (emoji, image ou ic√¥ne maison).
	‚Ä¢	Remplace ces usages par CoinsBadge pour les compteurs, ou Coin seul quand tu n‚Äôas pas besoin du montant.
Exemples:
	‚Ä¢	Header (compteur en haut √† gauche) :

<CoinsBadge amount={coins} glow size="sm" />


	‚Ä¢	Bouton d‚Äôachat :

<button className="...">
  <Coin size={18} className="mr-2" />
  Buy 1,000
</button>


	2.	Refactor minimal et s√ªr
	‚Ä¢	Si tu avais un composant CurrencyBadge/CoinCount, remplace son contenu interne par CoinsBadge pour tout uniformiser sans toucher aux appels existants.
	‚Ä¢	Sinon, fais un find & replace sur la base de code :
	‚Ä¢	Cherche ü™ô, coin, coins, ou le nom de l‚Äôancienne ic√¥ne.
	‚Ä¢	Remplace par <CoinsBadge ... /> (pour les compteurs) ou <Coin ... /> (ic√¥ne seule).
	3.	Design tokens (optionnel)
Si tu veux r√©gler la teinte facilement, expose des CSS vars Tailwind dans tailwind.config.js ou via :root :

:root {
  --coin-edge-1: #8A5D19;
  --coin-edge-2: #5A3F12;
  --coin-fill-1: #FFE28A;
  --coin-fill-2: #F8CA5A;
  --coin-fill-3: #D89B2C;
}

Puis remplace les couleurs fixes dans le SVG par var(--coin-...) si tu veux pouvoir ‚Äúskinner‚Äù facilement.

‚∏ª

4) Accessibilit√© & perfs
	‚Ä¢	Les composants sont SVG purs, donc ultra nets et rapides.
	‚Ä¢	aria-label sur le badge ‚Üí lecteurs d‚Äô√©cran OK.
	‚Ä¢	Le glow est optionnel; garde-le pour les mises en avant (Home/Shop), d√©sactive-le quand il y a beaucoup d‚Äôinstances √† l‚Äô√©cran.

‚∏ª

5) √Ä coller dans l‚Äôagent Replit (message court)

Update UI (coins):
	1.	Ajouter src/icons/Coin.tsx et src/components/CoinsBadge.tsx depuis les snippets fournis.
	2.	Remplacer tous les anciens rendus ‚Äúcoins‚Äù (emoji/PNG/ic√¥ne) par <CoinsBadge amount={coins} glow size="sm|md|lg" /> pour les compteurs, ou <Coin size={18} /> pour une ic√¥ne seule.
	3.	Ne modifier aucune logique business; lecture du store existant resources.coins.
	4.	Garder palette & effets (dark, glow l√©ger) pour un look Offsuit.

‚∏ª

Si tu veux, envoie-moi le fichier de ta Home ou du Header et je te fais le diff exact avec l‚Äôinsertion de CoinsBadge.