
Sujet : Int√©gration compl√®te des dos de cartes custom (PNG) + boutique + tirage + librairie

On part sur une approche dynamique (object storage + DB) afin que les dos soient stock√©s en PNG (400√ó560 px, ratio 5:7, fond transparent) et accessibles √† chaud, sans re-publi. Les fichiers actuels (commune verte, rare bleue, super rare violette, l√©gendaire jaune) doivent √™tre impl√©ment√©s comme premiers card backs.

‚∏ª

1) Affichage & jeu
	‚Ä¢	Remplacer les placeholders (couronne moche) dans PlayingCard / OffsuitCard par cardBackImageUrl (prop obligatoire).
	‚Ä¢	Source de v√©rit√© = DB + object storage. Aucun import statique.
	‚Ä¢	Ajouter un s√©lecteur de dos dans la librairie joueur : l‚Äôutilisateur choisit un dos actif parmi ceux poss√©d√©s ‚Üí ce dos s‚Äôaffiche partout (tables, lobby, parties).
	‚Ä¢	Les dos non poss√©d√©s s‚Äôaffichent visibles dans le shop et la collection avec badge √Ä acheter.

‚∏ª

2) Mod√®le de donn√©es (mis √† jour)

CardBacks(id, name, rarity, image_url, price_coins, created_at)
UserCardBacks(user_id, card_back_id, acquired_at)    -- inventaire joueur
UserProfile(user_id, active_card_back_id)            -- dos actif
ShopOffers(id, card_back_id, start_at, end_at, is_featured)
GachaPacks(id, name, weights_json, price_coins)
Purchases(id, user_id, item_type, item_id, price_coins, created_at)

‚ö†Ô∏è Raret√© = ENUM : "COMMON", "RARE", "SUPER_RARE", "LEGENDARY".

‚∏ª

3) Boutique & achats
	‚Ä¢	Achat direct : si UserCardBacks ne contient pas la carte ‚Üí bouton Acheter (ajoute en DB, d√©bite coins, toast succ√®s).
	‚Ä¢	Poss√©d√© : badge Poss√©d√© + bouton √âquiper (set UserProfile.active_card_back_id).
	‚Ä¢	Pas assez de coins : CTA Acheter des coins.
	‚Ä¢	Chaque carte dans le shop/collection doit afficher une pastille color√©e de raret√© :
	‚Ä¢	üü¢ vert = Commune
	‚Ä¢	üîµ bleu = Rare
	‚Ä¢	üü£ violet = Super Rare
	‚Ä¢	üü° jaune = L√©gendaire

‚∏ª

4) Tirage al√©atoire (gacha)
	‚Ä¢	√âcran Pack ‚Üí achat en coins ‚Üí animation reveal.
	‚Ä¢	Logique :
	1.	Tirer une raret√© via weights_json.
	2.	S√©lectionner un dos de cette raret√© non poss√©d√© ‚Üí si dup, donner refund en coins (ex: 20%).
	3.	Inscrire dans UserCardBacks + afficher la nouvelle carte avec animation.

Fonction pure expos√©e :

type Rarity = "COMMON"|"RARE"|"SUPER_RARE"|"LEGENDARY";

function drawCardBack(userId: string, packId: string): Promise<{
  wonCardBackId?: string,
  rarity: Rarity,
  dupRefundCoins?: number
}>


‚∏ª

5) API / services
	‚Ä¢	GET /card-backs ‚Üí liste + m√©tas (filtre owned/unowned, inclure rarity).
	‚Ä¢	POST /purchase/card-back {card_back_id}.
	‚Ä¢	POST /gacha/draw {pack_id}.
	‚Ä¢	POST /profile/set-active-card-back {card_back_id}.
	‚Ä¢	V√©rifier coins + atomicit√© sur chaque endpoint.

‚∏ª

6) √âtats UI
	‚Ä¢	Collection : grilles poss√©d√©s/non poss√©d√©s, pastille de raret√©, badge Nouveau.
	‚Ä¢	Boutique : cartes avec image PNG, prix, raret√©, bouton contextuel (Acheter / √âquiper / Poss√©d√©).
	‚Ä¢	Librairie joueur : section claire o√π l‚Äôutilisateur voit ses dos, avec raret√© + bouton √âquiper.
	‚Ä¢	Feedback : ‚ÄúLes dos achet√©s restent associ√©s √† ton compte et utilisables imm√©diatement‚Äù.

‚∏ª

7) Technique images
	‚Ä¢	Les PNGs fournis (commune, rare, super rare, l√©gendaire) sont √† uploader dans object storage (Replit/Cloudflare/Supabase).
	‚Ä¢	En DB : CardBacks.image_url = lien public.
	‚Ä¢	UI : thumbnails (200px) pour shop/collection, full (400√ó560) pour in-game.
	‚Ä¢	Mettre en place cache + placeholder blur pour fluidit√©.

‚∏ª

8) Crit√®res d‚Äôacceptation

‚úÖ Les 4 PNGs fournis remplacent tous les placeholders en jeu.
‚úÖ Possibilit√© d‚Äôacheter, √©quiper et jouer avec n‚Äôimporte quel dos poss√©d√©.
‚úÖ Librairie joueur fonctionne (inventaire persistant, dos actifs).
‚úÖ Shop montre les cartes non poss√©d√©es avec raret√© et prix.
‚úÖ Tirage gacha = raret√© pond√©r√©e, refund si doublon.
‚úÖ Persistance garantie (m√™me apr√®s reconnexion).

