Objectif : tout doit lire/écrire uniquement dans Supabase (Postgres + Auth). Aujourd’hui, certains bouts parlent encore à la DB Replit/Neon, ce qui casse le jeu (profile, shop, bets, friends, etc.).
	1.	Diagnostique rapide (sans changer du code métier)
	•	Liste moi précisément quelles connexions DB sont utilisées dans le repo :
	•	Supabase client (URL/keys).
	•	Toute connexion PG/Neon (PGHOST/PGDATABASE/…).
	•	Pour chaque endpoint/fonction critique, dis-moi quelle DB il utilise actuellement :
	•	/api/user/profile, /api/user/coins/update, /api/stats, /api/bets/*, /api/shop/*, /api/friends/* (+ tout hook use* qui fait des fetch).
	2.	Bascule propre vers Supabase (sans refactor massif)
	•	Remplace toute utilisation de la DB Replit/Neon par des requêtes Supabase (client JS) vers les tables Supabase équivalentes.
	•	Interdit (et supprime) toute écriture/lecture via PG/Neon direct.
	•	Centralise l’accès données dans un petit adapter db/profile|coins|bets|shop|friends qui utilise Supabase (1 fichier par domaine), puis branche les endpoints/hook dessus.
	3.	Migration des données (copie Replit ➜ Supabase)
	•	Si des tables existent encore côté Neon, exporte-les (SELECT → JSON/CSV) et importe dans Supabase en mappant vers :
	•	public.profiles (user_id, username, email, coins, gems, tickets, avatar…)
	•	game_stats, inventory, card_backs, friends/friendships, shop_purchases, etc. (utilise les noms réels déjà présents dans Supabase).
	•	Écris un script de migration simple (Node) dans scripts/migrate-to-supabase.ts :
	•	lit Neon (read-only), transforme, upsert dans Supabase.
	•	journalise ce qui est migré et ce qui est ignoré.
	4.	RLS/Triggers
	•	Vérifie que la création de profil se fait via trigger auth.users → public.profiles (déjà en place). N’utilise plus aucune insertion manuelle de profil côté app.
	•	Les coins et stats sont modifiés serveur (endpoints) via Supabase uniquement (pas de PATCH profile côté client pendant le jeu).
	5.	Nettoyage
	•	Supprime les variables d’environnement Neon inutilisées (PGHOST/PG*). Garde uniquement VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY (client) et la service role key côté serveur.
	•	Enlève tout code mort (connecteurs PG/Neon, requêtes SQL direct).
	6.	Acceptation (tests rapides)
	•	Signup/Login : /api/user/profile renvoie 200, username et coins=5000 à la première connexion.
	•	Shop : achat débite/credite Supabase et l’UI reflète le nouveau solde.
	•	Bets : POST /api/bets/prepare renvoie { roundId }, navigation fonctionne, débit/crédit serveur ok, /api/stats 200.
	•	Friends : recherche d’amis par username lit Supabase (pas Neon), et l’ajout fonctionne.
	•	Aucun appel réseau vers /user 500, aucun PATCH /api/user/profile pendant une partie.

Merci de :
	•	me montrer la liste des points qui parlaient encore à Neon,
	•	confirmer la bascule complète vers Supabase,
	•	et fournir le script de migration + un court log de migration.
