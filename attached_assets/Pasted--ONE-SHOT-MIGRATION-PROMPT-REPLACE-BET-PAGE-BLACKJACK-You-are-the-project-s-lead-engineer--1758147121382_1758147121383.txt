
üîß ONE-SHOT MIGRATION PROMPT ‚Äî REPLACE ‚ÄúBET‚Äù PAGE (BLACKJACK)

You are the project‚Äôs lead engineer.
Task: Replace the current bet screen with a polished Apple-Wallet/Offsuit-inspired layout and a dynamic bet system where the max bet = user‚Äôs current coin balance (changes every time). Implement both frontend UI and backend endpoints. If a file already exists, replace it. Do not keep legacy UI (ticks/markers) or static caps.

0) Detect tech & set paths
	‚Ä¢	If project is React Native/Expo ‚Üí use:
	‚Ä¢	src/screens/BetScreen.tsx
	‚Ä¢	src/components/BetSlider.tsx
	‚Ä¢	src/theme/tokens.ts
	‚Ä¢	API client in src/lib/api.ts
	‚Ä¢	If Flutter ‚Üí use:
	‚Ä¢	lib/screens/bet_screen.dart
	‚Ä¢	lib/widgets/bet_slider.dart
	‚Ä¢	lib/core/theme/tokens.dart
	‚Ä¢	API client in lib/data/api_client.dart
	‚Ä¢	If Web React ‚Üí src/pages/Bet.tsx, src/components/BetSlider.tsx, src/theme/tokens.ts, src/lib/api.ts.
Choose the matching path and implement.

1) Visual spec (strict)
	‚Ä¢	Palette only: black/gray/white. No brand colors.
	‚Ä¢	bg: #0F1012
	‚Ä¢	card: #1C1D21 ‚Ä¶ #24262B (very subtle)
	‚Ä¢	barBase: #2B2D32
	‚Ä¢	barFill: gradient #D9DADE ‚Üí #FFFFFF (subtle)
	‚Ä¢	pillBg: #2A2B30, pillBorder: #5A5C63
	‚Ä¢	ctaBg: #FFFFFF, ctaText: #15161A
	‚Ä¢	Layout (top ‚Üí bottom):
	1.	Top card full-width with rounded bottom corners (radius ~40), soft drop shadow below. Inside, centered:
	‚Ä¢	Balance (small, gray-light)
	‚Ä¢	Label YOUR BET (small caps, letter-spacing)
	‚Ä¢	Big amount (e.g., 3,700) bold, white
	2.	Slider right under the card:
	‚Ä¢	Base bar dark gray, filled part light gray‚Üíwhite gradient
	‚Ä¢	White circular thumb with tiny glossy highlight + soft shadow
	‚Ä¢	No ticks
	3.	Pills: 25% | 50% | MAX (rounded, dark, light border, soft shadow)
	4.	Spacer
	5.	CTA bottom: big rounded white button CONFIRM BET with soft shadow
	‚Ä¢	Micro-polish: 60fps animations, easing; on drag, thumb scale 1.04; bet number tween 120‚Äì180ms.

2) State & math (authoritative)
	‚Ä¢	Inputs: userId (from session), balance fetched on mount, optional minBet (default 1), optional tableMax.
	‚Ä¢	Compute:

dynamicMax = min(balance, tableMax || Infinity)
t ‚àà [0..1] from slider position
bet = clamp( round(dynamicMax * t), minBet, dynamicMax )


	‚Ä¢	Pills: set t to 0.25 | 0.5 | 1.0, recompute bet.
	‚Ä¢	Disable slider/CTA if balance < minBet (show hint ‚ÄúInsufficient balance‚Äù).
	‚Ä¢	If balance === 0 show GET COINS CTA that routes to the shop.

3) Frontend component contracts

Props & behavior (BetSlider)
	‚Ä¢	Props: { min: number; max: number; value: number; onChange: (v:number)=>void; onRelease?: (v:number)=>void }
	‚Ä¢	Renders the styled bar + thumb; maps drag X ‚Üí t ‚Üí value with the formula above.
	‚Ä¢	Accessibility: hit area ‚â• 44√ó44pt; VoiceOver label ‚ÄúBet slider, current X of Y‚Äù.
	‚Ä¢	Haptics (if available): light impact at 25/50/100%.

Screen (BetScreen)
	‚Ä¢	On mount: GET /users/me ‚Üí set balance; compute dynamicMax.
	‚Ä¢	Local state: t, bet, loading, error.
	‚Ä¢	Actions:
	‚Ä¢	Confirm ‚Üí POST /bets/prepare { amount: bet } then navigate to game with { betId }
	‚Ä¢	Before calling, re-fetch /users/me, recompute dynamicMax, re-clamp bet to avoid stale race.

4) Backend endpoints (create if missing)

Implement minimal endpoints (Node/Express or current backend stack). Never trust client bet.
	‚Ä¢	GET /users/me ‚Üí { id, coins }
	‚Ä¢	POST /bets/prepare body { amount }
	‚Ä¢	Server: load user ‚Üí dynamicMax = min(user.coins, tableMax?)
	‚Ä¢	Validate minBet ‚â§ amount ‚â§ dynamicMax
	‚Ä¢	Create BetDraft { betId, userId, amount, expiresAt: now+60s }
	‚Ä¢	Return { betId, amount }
	‚Ä¢	POST /bets/commit { betId } ‚Üí verify draft, deduct coins atomically, return { success:true }
	‚Ä¢	POST /bets/cancel { betId } ‚Üí unlock if not committed
	‚Ä¢	Auth: session/JWT. Idempotency on commit.

Simple types

type User = { id: string; coins: number };
type BetDraft = { betId: string; userId: string; amount: number; createdAt: string; expiresAt: string };

5) Concrete code (generate for detected stack)

If React Native/Expo (TSX)
	‚Ä¢	Create/replace src/theme/tokens.ts with color/spacing tokens above.
	‚Ä¢	Create src/components/BetSlider.tsx with PanGesture (Reanimated or RN Gesture Handler) implementing the math and visuals.
	‚Ä¢	Create/replace src/screens/BetScreen.tsx rendering the top card, slider, pills, CTA, and hitting the API.
	‚Ä¢	Add haptics (Expo Haptics) at 25/50/100.
	‚Ä¢	Add src/lib/api.ts with getMe(), prepareBet(amount), commitBet(betId).

If Flutter
	‚Ä¢	bet_slider.dart: GestureDetector + CustomPainter for bar/filled/handle; map dx‚Üít.
	‚Ä¢	bet_screen.dart: FutureBuilder for balance, AnimatedSwitcher for bet text, ElevatedButton CTA.
	‚Ä¢	api_client.dart: getMe(), prepareBet(), commitBet().

6) Acceptance tests (must pass)
	‚Ä¢	Open screen with balance=10_000 ‚Üí default t‚âà0.37 shows ‚âà 3,700.
	‚Ä¢	Tap 25% ‚Üí shows 2,500; 50% ‚Üí 5,000; MAX ‚Üí 10,000.
	‚Ä¢	Set minBet=100 & balance=500 ‚Üí clamp between 100 and 500.
	‚Ä¢	While confirming, if backend balance changed, client re-fetches and re-clamps; server rejects invalid amount.
	‚Ä¢	No ticks rendered; only the clean slider bar.
	‚Ä¢	Palette strictly black/gray/white; polish: soft shadows, rounded bottom on the top card.

7) Remove legacy

Delete or stop rendering any old bet UI (ticks/markers, static steps, hardcoded max). Ensure only the new BetScreen is reachable.

Deliver full code changes now for the detected tech path, with files created/replaced as specified, including the backend handlers and wiring.